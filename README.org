#+TITLE: cl-gtk4
* Requirement
Before getting started, please ensure these libraries are available in your system:
- GTK4
- GObject Introspection
- WebKit2GTK (optional)
- libadwaita (optional)
Theoretically, the application built with ~cl-gtk4~ can run on most systems supported by GTK4 and most implementations that support CFFI callback (required by ~cl-gobject-introspection~).
The [[file:examples/][examples]] are tested to run on following implementations:
- SBCL
  - Microsoft Windows \\
    [[file:examples/screenshots/adw-win.png]]
  - MacOS \\
    See: [[https://ibb.co/7KZz3r2]]
  - GNU/Linux \\
    See the screenshots in the [[examples][Examples]] section.
- CCL
- ECL
- ABCL
* Usage
1. Currently, ~cl-gtk4~ is available on [[https://ultralisp.org][Ultralisp]],  so it can be downloaded via Quicklisp with Ultralisp installed as its distribution.
   To install ~cl-gtk4~ manually, you can clone this repository along with the following dependencies into the ~local-projects~ under your Quicklisp installation root:
   - [[https://github.com/bohonghuang/cl-gobject-introspection-wrapper][cl-gobject-introspection-wrapper]]
   - [[https://github.com/bohonghuang/cl-glib][cl-glib]]
2. Load the library with:
   - ~(ql:quickload :cl-gtk4)~
   - ~(ql:quickload :cl-gtk4.adw)~ (if you need libadwaita)
   - ~(ql:quickload :cl-gtk4.webkit2)~ (if you need WebKit2GTK)
3. For GTK4 usage, please refer to [[https://docs.gtk.org/gtk4/][GTK API reference]] and check out the [[https://github.com/bohonghuang/cl-gobject-introspection-wrapper#conversion-rules][conversion rules]] for these APIs.
* Multi-threading
Please note that GTK runs in a single thread and is NOT thread-safe, so all the UI-related operations must happen in GTK [[https://docs.gtk.org/glib/main-loop.html][main event loop]],
which means you cannot write the code like this:

#+BEGIN_SRC lisp
  (let ((label (make-label :str "0"))
        (count 0))
    (bt:make-thread
     (lambda ()
       (loop :repeat 5
             :do (setf (label-text label) (format nil "~A" (incf count)))
                 (sleep 1)))))
#+END_SRC

GLib provides ~idle_add~ and ~timeout_add~ to add a function to execute in the main event loop,
which is thread-safe so that it can be called in other threads.
[[https://github.com/bohonghuang/cl-glib][cl-glib]] wraps ~idle_add~ and ~timeout_add~, so that you can pass Lisp functions to them.
It also provides these two APIs for convenience:
- ~glib:with-main-event-loop~ \\
  Execute the body in GTK main event loop, in which you can access the UI safely:
  #+BEGIN_SRC lisp
    (let ((label (make-label :str "0"))
          (count 0))
      (bt:make-thread
       (lambda ()
         (loop :repeat 5
               :do (glib:with-main-event-loop
                     (setf (label-text label) (format nil "~A" (incf count))))
                   (sleep 1)))))    ; Don't put this into `glib:with-main-event-loop'
  #+END_SRC
- ~glib:funcall~ \\
  Just like ~cl:funcall~,  it calls a function with the rest of its arguments, but within GTK main event loop:
  #+BEGIN_SRC lisp
    (let ((window (make-application-window :application app)))
      (bt:make-thread
       (lambda ()
         (sleep 1)
         (glib:funcall #'window-present window))))
  #+END_SRC
* Examples
** [[file:examples/gtk4.lisp::24][Simple Counter]]
[[file:examples/screenshots/gtk4-simple.png]]

#+BEGIN_SRC lisp
  (ql:quickload :cl-gtk4/example)
  (gtk4.example:simple)
#+END_SRC
** [[file:examples/gtk4.lisp::52][Fibonacci Calculator]] (Multi-threading)
[[file:examples/screenshots/gtk4-fibonacci.png]]

#+BEGIN_SRC lisp
  (ql:quickload :cl-gtk4/example)
  (gtk4.example:fibonacci)
#+END_SRC
** [[file:examples/gdk4-cairo.lisp][Pokéball Drawing Area]] ([[https://github.com/rpav/cl-cairo2][cl-cairo2]])
[[file:examples/screenshots/gdk4-cairo.png]]

#+BEGIN_SRC lisp
  (ql:quickload :cl-gdk4/example)
  (gdk4.example:cairo-test)
#+END_SRC
** [[file:examples/adw.lisp][Simple Lisp REPL]] (Libadwaita)
[[file:examples/screenshots/adw.png]]

#+BEGIN_SRC lisp
  (ql:quickload :cl-gtk4.adw/example)
  (adw.example:main)
#+END_SRC
** [[file:examples/webkit2.lisp][Simple Web Browser]] (WebKit2GTK)
[[file:examples/screenshots/webkit2.png]]

#+BEGIN_SRC lisp
  (ql:quickload :cl-gtk4.webkit2/example)
  (webkit2.example:main)
#+END_SRC
* Deployment
The [[file:examples/][examples]] are ready for being built into executable if the implementation supports ~:program-op~:
#+BEGIN_SRC lisp
  (asdf:operate :program-op :cl-gtk4/example)
#+END_SRC
Then you could find the executable file under the ~examples~ folder.

Note that: 
- On ECL, for unknown reason, the ~:entry-point~ of the ASDF system is ignored.
  This command should be used instead:
  #+BEGIN_SRC lisp
    (asdf:make-build :cl-gtk4/example :type :program :epilogue-code '(progn (uiop:symbol-call :gtk4.example :simple) (si:exit)))
  #+END_SRC
- On Microsoft Windows, it's recommended to launch your application via [[https://www.dependencywalker.com/][Dependency Walker]],  then the shared libraries used by your application would appear in it.
  You should copy all these ~.dll~ files into the folder where you place the executable file. If you are using MSYS2, the folder structure might be like this:

  #+BEGIN_EXAMPLE
    .
    ├── bin
    │   ├── gdbus.exe
    │   ├── libgio-2.0-0.dll
    │   ├── libgirepository-1.0-1.dll
    │   ├── libglib-2.0-0.dll
    │   ├── libgobject-2.0-0.dll
    │   ├── libgtk-4-1.dll
    │   ├── your_application.exe
    │   └── ...
    ├── lib
    │   ├── girepository-1.0
    │   ├── gtk-4.0
    │   └── ...
    └── share
        ├── icons
        └── ...
  #+END_EXAMPLE

  The folder ~lib/girepository-1.0~ is mandatory, without which your application won't work as expected.
